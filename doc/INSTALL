This manual was originally written using Ubuntu, but basically works the
same for Debian and its derivates. It works for Debian Wheezy, Ubuntu
and Linux Mint.

If you just want to try G'n'T Eval you can download a VirtualBox image
that has all required components pre-installed and automatically boots
the Web GUI. Read more about it in doc/VIRTUAL_BOX_IMAGE.

=================
REQUIRED SOFTWARE
=================

packages w/o special treatment
------------------------------

  autoconf
  barcode
  bison
  build-essential
  curl
  ghostscript
  git
  hunspell
  libc6-dev
  libcairo2-dev
  libmagickcore-dev
  libmagickwand-dev
  libmysqlclient-dev
  libpq-dev
  libreadline6
  libreadline6-dev
  libsqlite3-0
  libsqlite3-dev
  libssl-dev
  libtool
  libxml2-dev
  libxslt-dev
  libyaml-dev
  libzbar0
  ncurses-dev
  openssl
  pkg-config
  poppler-utils
  postgresql
  qrencode
  sqlite3
  texlive
  texlive-fonts-extra
  texlive-lang-german
  texlive-latex-extra
  texlive-xetex
  tex-gyre
  ttf-thai-tlwg
  zlib1g
  zlib1g-dev


If any of the packages cannot be found, please open a bug report at
  https://github.com/breunigs/gnt-eval/issues/new
To work around the issue, continue without that package and see if the
installation complains about missing files. If it does, one can identify
the missing package using apt-file:
  sudo apt-get install apt-file && sudo apt-file update
  apt-file search "some/missing/file.h"

Database Backend
----------------

This guide uses PostgreSQL as a database backend. All necessary packages
for MySQL support are installed as well, so if you prefer MySQL simply
change the configuration later on.

Any other backend, that is as powerful as MySQL or PostgreSQL will be
fine, too, but you need to install all necessary packages and Ruby Gems
yourself.

I advise against using SQLite because it supports standard deviation
only through an extension which must be manually installed. Furthermore,
it needs to be loaded each time from within this project, so you’ll have
to hack the source and end up with a still limited database system.


Ruby & Rails version hell
-------------------------

While it is possible to use system packages for ruby related software as
well, we ran into compatibility problems. The solution to not have to
deal with this is called “RVM” (Ruby Version Manager) and essentially
maintains independent versions of ruby as required.

Usually these steps are sufficient to get RVM running:
  curl -L https://get.rvm.io | bash -s stable --ruby
And add the following line at the end of your .bashrc, .zshrc, …
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"
To see if this worked open a new shell and type execute "rvm". If the
command is not found, please refer to the manual at
  https://rvm.io/rvm/install/

Then we need to install ruby and its dependencies:
  rvm install 1.9.3
and create a gemset, which will be seperate from your other system gems:
  rvm gemset create 'gnt-eval'
  rvm 1.9.3@gnt-eval


Image Processing
----------------

For image processing you can either use your system-provided packages or
build them on your own. Latter might speed up things a bit, but for
starters it's recommended to stick to the system-ones.

A)  if you want to use the system-provided packages:
      imagemagick
      librmagick-ruby

B)  if you want to build your own you'll need to additionally install:
      ruby1.9-dev
    and run "rake magick:all" once the repository has been checked out.
    You can install the system libraries alongside the custom repository
    without any problems. This way you can uninstall the custom versions
    at any time you like. If you run into problems, like segmentation
    faults, it’s probably better to stick with the system libraries
    because debugging the ImageMagick-RMagick-ZBar combo can be a lot of
    effort.


To continue you first need to download a version of G'n'T.


=================
DOWNLOADING G'n'T
=================

For now, you can only clone the repository. To do so run:
  git clone git://github.com/breunigs/gnt-eval.git gnt-eval

Grab other projects that we depend on:
  cd gnt-eval && git submodule update --init

If you run this in a virtual machine, you can use the “Shared Folders”
feature of VirtualBox to mount a directory from the host machine. First,
add the folder then run
  sudo mount -t vboxsf gnt-repository-on-host /home/gnt-eval/gnt-eval
to mount the directory for this session or add it to the fstab file.

==========================
FINISHING THE INSTALLATION
==========================

Change into the newly created directory if you haven’t already.

Run
  gem install bundler
to install the version management tool that will be used to grab all
other required gems and then
  bundle install
to actually get them. Finally, there's an incompatibility left to solve
by installing an older version of RubyGems.
  update_rubygems

If, for some reason, bundle install reports an error with glib2 not being
built, featuring a “checking for gobject-2.0... no” error message, try
the following (choose the first for 64 bit systems, latter for 32 bit):
PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig/" bundle install
PKG_CONFIG_PATH="/usr/lib/i386-linux-gnu/pkgconfig/" bundle install

To confirm the basic setup worked, type in
  rake
to get a (large) list of available commands. If not, you probably miss
some packages. Please report any that weren't listed in this manual.

===================
BASIC CONFIGURATION
===================

Have look at
  web/config/seee_config.rb
for most settings. It’s not recommended to edit this file directly, but
rather use the system wide and user configuration file. For details, see
the boilerplate comment in the file.

The application paths are usually fine and work out of the box, however
you need to specify an URL and matching local path if you want the
extracted comments to be displayed in the web interface.
The relevant variables are:
  :comment_images_public_dir
  :comment_images_public_link
Good defaults that will work for a basic setup:
  :comment_images_public_dir  => File.join(RAILS_ROOT, "public", "comments")
  :comment_images_public_link => "http://localhost:3000/comments"
(Attention: Don’t delete trailing commas in seee_config.rb, if they are
present in the default file. Otherwise you’ll get syntax errors and it
won’t work.)

If above directory requires access rights which are different from the
ones your current terminal ownes, you probably want to change the
following variables so the respective commands can read AND write to
those directories once executed. For example, in our setup I am not
allowed to write to /home/eval directly, but I am a member of the eval-
group, so I may login as user "eval". We have a wrapper script for this,
so the relevant command became "login_gruppe_home eval cp" instead of
just "cp". The relevant variables are:
  :cp_comment_image_directory
  :mkdir_comment_image_directory
If you use the values from above, simply leave these on their default
values.

It has been proven useful to have a directory with all the
questionnaires, in case too few have been printed. This path will be
printed included in the how-tos for the people who carry out an
evaluation so it's important it is up to date. The relevant variable is:
  :forms_howto_dir
A good default would be the folder where they are stored when being
created. However, there’s a lot of other stuff in that folder, so people
might get confused:
  :forms_howto_dir => File.join(RAILS_ROOT, "..", "tmp", "forms")

If you want to use mass-mailing (you can use it to remind your minions
to carry out their evals and to notify profs that the eval is done) you
have to adjust the following variables:
  :standard_mail_domain
  :standard_mail_from
  :standard_mail_bcc
The bcc part is useful, so you can get a confirmation to your own
address. Your local mail setup will be used, so ensure it works before
trying anything (check using the mail command, for example).

Databases
---------
Now onto the databases. Yes, there are two: One for Rails (i.e. all the
profs, courses, tutors and so on) and one for storing the recognized
sheet data. So you’ll have to setup two databases.

To get access to PostgreSQL features, you’ll have to login as postgres
user. To do so, run:
  sudo -u postgres -s
Now you’ll be able to execute PostgreSQL specific commands. First, run
  createuser -P gnt-eval
to create a new user called “gnt-eval”. The -P switch will prompt you for
a password, leave it out to create a user with no password (our password
will again be “gnt-eval”). You will be asked some questions, answer them
as you see fit.

* web/config/seee_config.rb
  This is the DB where all the results will be stored. Locate
  @@external_database and set them up as you like. Don’t modify this
  file directly and rather use the system wide or user configuration
  file. Read the boilerplate comment on how this can be accomplished.
  The following will use Postgres with the user created above:
    @@external_database = {
      :dbi_handler => 'Pg',
      :username => 'gnt-eval',
      :password => 'gnt-eval',
      :host => 'localhost',
      :database => 'results'
    }
  Still logged in as postgres, run the following to create the database:
    createdb results

* web/config/database.yml
  This is the database Rails uses. You can define different setups for
  a debug or production environment, but for now set them both to the
  same values. (We do this as well and that makes us, by definition, bad
  people). Like with seee_config, database.yml has system wide and user
  configuration files, see the boilerplate comment for details.
  Again, run
    createdb rails
  while still logged in as postgres user and update the database.yml:
    login: &login
      adapter:  postgresql
      username: <%= Seee::Config.external_database[:username] %>
      password: <%= Seee::Config.external_database[:password] %>
      host:     <%= Seee::Config.external_database[:host] %>

    development:
      <<: *login
      database: rails

    production:
      <<: *login
      database: rails

Note that Rails and DBI use different handlers/adapters and that you
need to install a different gem for each. For a list of available DBI
handlers you can have a look at its documentation:
  http://ruby-dbi.rubyforge.org/rdoc/index.html
I haven’t found a list of available Rails adapters, but you can view the
ones installed on your system by listing the following directory:
  activerecord-(version number)/lib/active_record/connection_adapters
Alternatively, just enter this command:
  locate *active_record/connection_adapters/*_adapter.rb

Once the database config is final, run the following to create all
necessary tables:
  cd web && rake db:migrate


===============
FURTHER READING
===============

* docs/MY_FIRST_EVAL
  Read up on how to actually use the software.

* docs/Setting up production
  How to setup the web component of GnT Eval to run in production mode
  and serve it via Apache or Nginx.

* tex/results/README
  Information about how to add additional visualizers or change output
  design


=======
SUMMARY
=======

sudo apt-get install curl git autoconf barcode bison build-essential ghostscript hunspell libc6-dev libcairo2-dev libmagickcore-dev libmagickwand-dev libmysqlclient-dev libpq-dev libreadline6 libreadline6-dev libsqlite3-0 libsqlite3-dev libssl-dev libtool libxml2-dev libxslt-dev libyaml-dev libzbar0 ncurses-dev openssl pkg-config postgresql sqlite3 texlive texlive-fonts-extra texlive-lang-german texlive-latex-extra texlive-xetex tex-gyre ttf-thai-tlwg zlib1g zlib1g-dev imagemagick librmagick-ruby poppler-utils qrencode

Above command will take forever, wait until curl and git are installed,
then continue without waiting for it to finish.

curl -L https://get.rvm.io | bash -s stable

Add this line at the end of .bashrc/.zshrc/etc.:
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

Open new shell

rvm pkg install openssl
rvm install 1.9.3
rvm gemset create 'gnt-eval'
rvm 1.9.3@gnt-eval

git clone git://github.com/breunigs/gnt-eval.git gnt-eval
cd gnt-eval
git submodule update --init

gem install bundler
bundle install

See the detailed documentation above if bundle install fails.

Leave the configuration options on their defaults, they should work
out of the box.

sudo -u postgres -s
createuser -P gnt-eval
gnt-eval[Enter]
gnt-eval[Enter]
y[Enter]
createdb rails
createdb results
exit

cd web && rake db:migrate
rails server

Open new terminal
cd gnt-eval

x-www-browser http://localhost:3000&
Add data in WWW-Browser, use forms from doc/example_forms

rake misc:howtos
rake forms:generate

Print forms and evaluate. Read above if you can use rake forms:print.


rake images:scan
      OR
scan 300 DPI, b/w, two-page TIFs to tmp/scanned

rake images:sortandalign
rake images:omr
rake images:correct
rake images:fill_text_box
rake images:insertcomments

x-www-browser http://localhost:3000&
Type comments for each course/tutor in web interface

rake results:pdf_report
rake results:make_preliminary
